{"version":3,"sources":["components/GlobalInputs/GlobalInputs.tsx","components/HeatmapTableGenerator/colorTableCells.tsx","components/HeatmapTableGenerator/HeatmapTableGenerator.tsx","components/App/App.tsx","index.js"],"names":["ColumnDuplicator","props","apiKey","chartId","onChangeApiKey","onChangeChartId","react","htmlFor","id","value","onChange","e","target","_callee","colorBrewerScale","maxValue","metaRes","metaJson","chart","columnNames","scale","putRes","regenerator_default","a","wrap","_context","prev","next","fetch","concat","headers","Authorization","sent","json","data","Object","keys","metadata","visualize","columns","Chroma","domain","forEach","name","colors","reduce","obj","color","i","customColorBy","customColorBackground","method","body","JSON","stringify","abrupt","stop","run","_useState","useState","_useState2","slicedToArray","status","setStatus","_useState3","_useState4","setColorBrewerScale","_useState5","_useState6","setMaxValue","_run","asyncToGenerator","mark","colorTableCells","t0","console","log","apply","this","arguments","onClick","App","setApiKey","setChartId","react_default","createElement","GlobalInputs","HeatmapTableGenerator","ReactDOM","render","App_App","document","getElementById"],"mappings":"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","file":"static/js/main.0da3ea23.chunk.js","sourcesContent":["import * as React from 'react'\n\ntype Props = {\n  apiKey: string\n  chartId: string\n  onChangeApiKey: (apiKey: string) => void\n  onChangeChartId: (chartId: string) => void\n}\nfunction ColumnDuplicator (props: Props) {\n  const { apiKey, chartId, onChangeApiKey, onChangeChartId } = props\n\n  return <>\n    <p>\n      <label htmlFor='apiKey'>API Key:</label>\n      <input id='apiKey' value={apiKey} onChange={e => { onChangeApiKey(e.target.value) }} />\n    </p>\n    <p>\n      <label htmlFor='chartId'>Chart ID:</label>\n      <input id='chartId' value={chartId} onChange={e => { onChangeChartId(e.target.value) }} />\n    </p>\n  </>\n}\n\nexport default ColumnDuplicator\n","import Chroma from 'chroma-js'\n\nasync function run (apiKey: string, chartId: string, colorBrewerScale: string, maxValue: number) {\n  const metaRes = await fetch(`https://api.datawrapper.de/charts/${chartId}`, {\n    headers: {\n      'Authorization': `Bearer ${apiKey}`\n    }\n  })\n  const metaJson = await metaRes.json()\n  const chart = metaJson.data\n\n  const columnNames = Object.keys(chart.metadata.visualize.columns)\n  const scale = Chroma.scale('YlOrRd').domain([0, maxValue])\n\n  columnNames.forEach(name => {\n    const colors = scale.colors(maxValue).reduce((obj: {[key: number]: string}, color: string, i: number) => {\n      obj[i] = color\n      return obj\n    }, {})\n\n    chart.metadata.visualize.columns[name].customColorBy = 1\n    chart.metadata.visualize.columns[name].customColorBackground = colors\n  })\n\n  const putRes = await fetch(`https://api.datawrapper.de/charts/${chartId}`, {\n    method: 'PUT',\n    headers: {\n      'Authorization': `Bearer ${apiKey}`\n    },\n    body: JSON.stringify(chart)\n  })\n\n  return putRes\n}\n\nexport default run","import * as React from 'react'\nimport { useState } from 'react'\nimport colorTableCells from './colorTableCells'\n\ntype Props = {\n  chartId: string\n  apiKey: string\n}\nfunction ColumnDuplicator (props: Props) {\n  const { apiKey, chartId } = props\n  const [status, setStatus] = useState('')\n  const [colorBrewerScale, setColorBrewerScale] = useState('YlOrRd')\n  const [maxValue, setMaxValue] = useState(100)\n\n  async function run () {\n    setStatus('running')\n    try {\n      await colorTableCells(apiKey, chartId, colorBrewerScale, maxValue)\n      setStatus('all good')\n    } catch(e) {\n      console.log(e)\n      setStatus('' + e)\n    }\n  }\n\n  return <>\n    <label htmlFor='maxValue'>Max:</label>\n    <input value={maxValue} onChange={e => { setMaxValue(+e.target.value) }} />\n    <label htmlFor='maxValue'>Scala:</label>\n\n    <input value={colorBrewerScale} onChange={e => { setColorBrewerScale(e.target.value) }} />\n    <button onClick={run}>generate Heatmap</button>\n    <output>{status}</output>\n  </>\n}\n\nexport default ColumnDuplicator\n","import React, { useState } from 'react'\nimport GlobalInputs from 'components/GlobalInputs/GlobalInputs'\nimport HeatmapTableGenerator from 'components/HeatmapTableGenerator/HeatmapTableGenerator'\n\nfunction App () {\n  const [apiKey, setApiKey] = useState('')\n  const [chartId, setChartId] = useState('')\n\n  return <div>\n    <GlobalInputs\n      apiKey={apiKey}\n      chartId={chartId}\n      onChangeChartId={setChartId}\n      onChangeApiKey={setApiKey} />\n    <HeatmapTableGenerator apiKey={apiKey} chartId={chartId} />\n  </div>\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from 'components/App/App.tsx'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}